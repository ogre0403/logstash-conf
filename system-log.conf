input {
    
    file{
        type => "NameNode"
        path => ["/var/log/hadoop-hdfs/hadoop-cmf-hdfs-NAMENODE-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/namenode.since"
        add_field =>{
            "service" => "Braavos"
        }
    }

    
    file{
        type => "DataNode"
        path => ["/var/log/hadoop-hdfs/hadoop-cmf-hdfs-DATANODE-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/datanode.since"
        add_field => {
            "service" => "Braavos"
        } 
    }

    file{
        type => "JournalNode"
        path => ["/var/log/hadoop-hdfs/hadoop-cmf-hdfs-JOURNALNODE-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/journal.since"
        add_field => {
            "service" => "Braavos"
        } 
    }


    file{
        type => "ResourceManager"
        path => ["/var/log/hadoop-yarn/hadoop-cmf-yarn-RESOURCEMANAGER-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/resourcemanager.since"
        add_field => {
            "service" => "Braavos"
        } 
    }
    

    file{
        type => "NodeManager"
        path => ["/var/log/hadoop-yarn/hadoop-cmf-yarn-NODEMANAGER-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/nodemanager.since"
        add_field => {
            "service" => "Braavos"
        } 
    }

    file{
        type => "HMaster"
        path => ["/var/log/hbase/hbase-cmf-hbase-MASTER-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/master.since"
        add_field => {
            "service" => "Braavos"
        } 
    }

    file{
        type => "RegionServer"
        path => ["/var/log/hbase/hbase-cmf-hbase-REGIONSERVER-*.log.out"]
        sincedb_path => "/opt/logstash/.sincedb/master.since"
        add_field => {
            "service" => "Braavos"
        } 
    }

    file{
        type => "linux-syslog"
        path => ["/var/log/auth.log",
                 "/var/log/syslog"]
        sincedb_path => "/opt/logstash/.sincedb/syslog.since"
        add_field =>{
            "service" => "Braavos"
        }
    }

    file{
        type => "audit-syslog"
        path => ["/var/log/audit/audit.log"]
        sincedb_path => "/opt/logstash/.sincedb/audit.since"
        add_field =>{
            "service" => "Braavos"
        }
    }
}


filter {

    if [type] == "NameNode" or [type] == "DataNode" or [type] == "SecondaryNN" or [type] == "JournalNode" or [type] == "ZKFC"
        or [type] == "ResourceManager" or [type] == "NodeManager" 
        or [type] == "HMaster" or [type] == "RegionServer" {

        # hadoop log4j log start with ISO8601 date format, following
        # lines not start with date should be merged into single event
        multiline{
            pattern => "^%{TIMESTAMP_ISO8601}"
            what => "previous"
            negate => true
        }
    
        # grok CANNOT hadnle string with \n, replace \n first
        mutate {
            gsub => ['message', "\n", " @LINE_BREAK@ "]
        }
    
        # match hadoop log4j format 
        grok {
            match => [message, "%{DATA:ts} %{WORD:level} %{JAVACLASS:class}: %{GREEDYDATA:log_msg}" ]
        }
    
        # use log date as timestamp
        date {
            match => [ "ts", "yyyy-MM-dd HH:mm:ss,SSS"]
            timezone =>  "Asia/Taipei"
        }
    
        mutate {
            gsub => ['log_msg', "@LINE_BREAK@", "\n"]
            # The new line here is the only why to put a new line ...
            gsub => ["log_msg", "\\n", "\
"]
            gsub => ["log_msg", "\\$", "" ]
        }

        if "_grokparsefailure" in [tags] {
            # grok not match, leave message field for debug
            mutate {                            
                remove_field => [ "tags" ]      
            }
        } else {
            # grok match, remove extra field
            mutate {                                        
                remove_field => [ "tags", "message", "ts" ]
            }                                               
        }
    }


    if [type] == "audit-syslog" {
        
        grok {
            match => {"message" => "%{AUDIT}" }
        }

        grok {
            match => {"message" => "%{AUDITLOGIN}" }
        }

        mutate {                                        
            remove_field => [ "tags", "message" ]
        }  
        
    }


    if [type] == "linux-syslog" {

        # match syslog format
        grok {
            #match => { "message" => "%{SYSLOGLINE}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        }
   
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            timezone =>  "Asia/Taipei"
        }

        # match sshd leagal user pattern
        grok {
            match => { "syslog_message" => "Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
        }

        # match invalid user pattern
        grok {
            match => { "syslog_message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
        }
        
        # remove un-use tags
        mutate {                                        
            remove_field => [ "tags", "message", "syslog_timestamp" ]
        }  
    }

}

output { 
#    stdout{
#        codec => rubydebug
#    }

    tcp {
       host => "TCNN"
       mode => "client"
       codec => "json_lines"
       port => "5001"
    }
}
